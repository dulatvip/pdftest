#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import json
import sys
from datetime import datetime, timedelta

def create_directory_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        'uploads',
        'templates_json',
        'credentials', 
        'static',
        'static/css',
        'static/js',
        'templates'
    ]
    
    created = []
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            created.append(directory)
            
            # –°–æ–∑–¥–∞–µ–º .gitkeep –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫
            if directory in ['uploads', 'credentials']:
                gitkeep_path = os.path.join(directory, '.gitkeep')
                with open(gitkeep_path, 'w') as f:
                    f.write('# –ü–∞–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å\n')
    
    if created:
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏: {', '.join(created)}")
    else:
        print("   ‚úÖ –í—Å–µ –ø–∞–ø–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

def create_sample_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_example = """# –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

SECRET_KEY=your-very-secret-key-here-change-this
USERS_SHEET_URL=https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID/edit
FLASK_ENV=production
"""
    
    if not os.path.exists('.env.example'):
        with open('.env.example', 'w', encoding='utf-8') as f:
            f.write(config_example)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.example")

def create_gitignore():
    """–°–æ–∑–¥–∞–Ω–∏–µ .gitignore —Ñ–∞–π–ª–∞"""
    gitignore_content = """# –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
.env
credentials/
*.log

# –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
uploads/
!uploads/.gitkeep

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Flask
instance/
.webassets-cache

# PyCharm
.idea/

# VS Code
.vscode/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
"""
    
    if not os.path.exists('.gitignore'):
        with open('.gitignore', 'w', encoding='utf-8') as f:
            f.write(gitignore_content)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .gitignore")

def create_requirements():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
    requirements = """Flask>=2.3.0
Werkzeug>=2.3.0
gspread>=5.10.0
google-auth>=2.20.0
pdf2image>=3.1.0
Pillow>=10.0.0
python-dotenv>=1.0.0
"""
    
    if not os.path.exists('requirements.txt'):
        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write(requirements)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª requirements.txt")

def create_sample_classes():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª–∞—Å—Å–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    classes_path = os.path.join('static', 'classes.json')
    
    if not os.path.exists(classes_path):
        default_classes = [
            "1–ê", "1–ë", "1–í", "1–ì",
            "2–ê", "2–ë", "2–í", "2–ì", 
            "3–ê", "3–ë", "3–í", "3–ì",
            "4–ê", "4–ë", "4–í", "4–ì",
            "5–ê", "5–ë", "5–í", "5–ì",
            "6–ê", "6–ë", "6–í", "6–ì",
            "7–ê", "7–ë", "7–í", "7–ì",
            "8–ê", "8–ë", "8–í", "8–ì",
            "9–ê", "9–ë", "9–í", "9–ì",
            "10–ê", "10–ë", "10–í",
            "11–ê", "11–ë", "11–í"
        ]
        
        with open(classes_path, 'w', encoding='utf-8') as f:
            json.dump(default_classes, f, ensure_ascii=False, indent=2)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª static/classes.json")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'flask',
        'gspread', 
        'google.auth',
        'pdf2image',
        'PIL'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace('.', '_'))
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
        print("   üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
        return False
    else:
        print("   ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def create_readme():
    """–°–æ–∑–¥–∞–Ω–∏–µ README —Ñ–∞–π–ª–∞"""
    readme_content = """# –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**
   ```bash
   pip install -r requirements.txt
   ```

2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets API:**
   - –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console
   - –í–∫–ª—é—á–∏—Ç–µ Google Sheets API
   - –°–æ–∑–¥–∞–π—Ç–µ Service Account
   - –°–∫–∞—á–∞–π—Ç–µ credentials.json –≤ –ø–∞–ø–∫—É `credentials/`

3. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
   - –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google –¢–∞–±–ª–∏—Ü—É
   - –î–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø Service Account email
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –õ–æ–≥–∏–Ω | –ü–∞—Ä–æ–ª—å | –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è

4. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
   ```bash
   python app.py
   ```

5. **–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä:**
   ```
   http://localhost:5000
   ```

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
‚îú‚îÄ‚îÄ app.py              # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚îú‚îÄ‚îÄ config.py           # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ auth_utils.py       # –£—Ç–∏–ª–∏—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚îú‚îÄ‚îÄ setup.py            # –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚îú‚îÄ‚îÄ templates/          # HTML —à–∞–±–ª–æ–Ω—ã
‚îú‚îÄ‚îÄ static/             # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
‚îú‚îÄ‚îÄ uploads/            # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚îú‚îÄ‚îÄ templates_json/     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Ç–µ—Å—Ç–æ–≤
‚îî‚îÄ‚îÄ credentials/        # –§–∞–π–ª—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
```

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ `config.py`:

- `USERS_SHEET_URL` - —Å—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- `SECRET_KEY` - —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Flask (–∏–∑–º–µ–Ω–∏—Ç–µ!)
- `SESSION_TIMEOUT_HOURS` - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

‚ö†Ô∏è **–í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:**

- –ò–∑–º–µ–Ω–∏—Ç–µ `SECRET_KEY`
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS
- –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø—Ä–∞–≤–∞ Service Account
- –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ `python setup.py` 
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ credentials.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø—ã –∫ Google –¢–∞–±–ª–∏—Ü–µ
"""
    
    if not os.path.exists('README.md'):
        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(readme_content)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª README.md")

def print_setup_instructions():
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print(f"\n{'='*60}")
    print("üéâ –°–ò–°–¢–ï–ú–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê!")
    print(f"{'='*60}")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("\n1. üì¶ –£–°–¢–ê–ù–û–í–ò–¢–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    print("   pip install -r requirements.txt")
    
    print("\n2. üîë –ù–ê–°–¢–†–û–ô–¢–ï GOOGLE SHEETS API:")
    print("   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Cloud Console")
    print("   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    print("   - –í–∫–ª—é—á–∏—Ç–µ Google Sheets API") 
    print("   - –°–æ–∑–¥–∞–π—Ç–µ Service Account")
    print("   - –°–∫–∞—á–∞–π—Ç–µ credentials.json –≤ –ø–∞–ø–∫—É credentials/")
    
    print("\n3. üìä –ù–ê–°–¢–†–û–ô–¢–ï –¢–ê–ë–õ–ò–¶–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
    print("   - –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google –¢–∞–±–ª–∏—Ü—É")
    print("   - –î–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø Service Account (email –∏–∑ credentials.json)")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –°—Ç–æ–ª–±–µ—Ü A=–õ–æ–≥–∏–Ω, B=–ü–∞—Ä–æ–ª—å, C=–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è")
    
    print("\n4. üöÄ –ó–ê–ü–£–°–¢–ò–¢–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï:")
    print("   python app.py")
    
    print("\n5. üåê –û–¢–ö–†–û–ô–¢–ï –í –ë–†–ê–£–ó–ï–†–ï:")
    print("   http://localhost:5000")
    
    print(f"\n{'='*60}")
    print("üí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("   python setup.py     # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    print("   python app.py       # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
    print(f"{'='*60}\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    create_directory_structure()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    create_sample_config()
    create_gitignore()
    create_requirements()
    create_sample_classes()
    create_readme()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print()
    deps_ok = check_dependencies()
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_setup_instructions()
    
    if not deps_ok:
        print("‚ö†Ô∏è  –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        return 1
    
    return 0

if __name__ == '__main__':
    sys.exit(main())